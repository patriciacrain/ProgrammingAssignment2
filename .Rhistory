search()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv  <- NULL
set  <- function(y) {
x <<- y
inv <<- NULL
}
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv  <- x$getinverse()
if(!is.null(i)) {
message("getting cached inverse")
return(inv)
}
data  <- x$get()
inv  <- inverser(data, ...)
x$setinverse(inv)
i
}
makeCacheMatrix(1,2,3,4,5,6,7)
makeCacheMatrix(9)
makeCacheMatric(x=matrix(1,1,2,2))
makeCacheMatrix(x=matrix(1,1,2,2))
get
set
set()
## These functions first create a cache of the inverse of a matrix which can be
## used instead of calculating the inverse of a matrix in the second function.
## the makeCacheMatrix function creates a list of functions which cache the inverse of the matrix.
makeCacheMatrix <- function(x = matrix()) {
inv  <- NULL
set  <- function(y) {
x <<- y
inv <<- NULL
}
}
get <- function() x
setinverse <- function(solve) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
## the cacheSolve function computes the inverse of a matrix, unless the inverse of
## the matrix is already in the cache, in which case it returns the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv  <- x$getinverse()
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
data  <- x$get()
inv  <- solve(data, ...)
x$setinverse(inv)
i
}
makeCacheMatrix <- function(x = matrix()) {
inv  <- NULL
set  <- function(y) {
x <<- y
inv <<- NULL
}
}
get <- function() x
setinverse <- function(solve) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
